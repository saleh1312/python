import tensorflow as tf
from tensorflow.keras.layers import *
import numpy as np
import matplotlib.pyplot as plt
import time

(timg,tlab),(simg,slab)=tf.keras.datasets.mnist.load_data()
timg=timg.reshape(timg.shape[0],28,28,1)
timg = (timg-127.5)/127.5
buffer_size=timg.shape[0]
batch_size=1000
timg = tf.data.Dataset.from_tensor_slices(timg).shuffle(buffer_size).batch(batch_size)

#create dicriminator model
def make_diso_model():
    model=tf.keras.Sequential()
    model.add(Conv2D(7,(3,3),padding='same',input_shape=(28,28,1)))
    model.add(Flatten())
    model.add(LeakyReLU())
    model.add(Dense(50,activation='relu'))
    model.add(Dense(1))
    return model
    
diso=make_diso_model()

diso_opt=tf.optimizers.Adam(0.001)

def get_diso_loss(realpred,fakepred):
    realpred=tf.sigmoid(realpred)
    fakepred=tf.sigmoid(fakepred) 
    realloss=tf.losses.binary_crossentropy(tf.ones_like(realpred),realpred)
    fakeloss=tf.losses.binary_crossentropy(tf.zeros_like(fakepred),fakepred)
    return fakeloss+realloss
    
    
    
#create generator
def make_geno_moedl():
    model=tf.keras.Sequential()
    model.add(Dense(7*7*256,input_shape=(100,)))
    model.add(BatchNormalization())
    model.add(Reshape((7,7,256)))
    model.add(Conv2DTranspose(128,(3,3),padding='same'))
    model.add(BatchNormalization())
    model.add(Conv2DTranspose(64,(3,3),padding='same',strides=(2,2)))
    model.add(BatchNormalization())
    model.add(Conv2DTranspose(1,(3,3),padding='same',strides=(2,2)))
    model.add(Conv2D(1,(3,3),padding='same'))
    return model
    
geno=make_geno_moedl()
geno_opt=tf.optimizers.Adam(0.0001)

def get_geno_loss(fakepred):
    fakepred=tf.sigmoid(fakepred)
    fakeloss=tf.losses.binary_crossentropy(tf.ones_like(fakepred),fakepred)
    return fakeloss
    

# training
def train(dataset,e): 
    global p
    for i in range(e):
        p=p+1
        for images in dataset:
            images=tf.cast(images,tf.dtypes.float32)
            t=train_step(images)

            
            
def train_step(images):
   
    fake_image_noise = np.random.randn(batch_size,100).astype('float32')
    with tf.GradientTape() as gen_tape , tf.GradientTape() as dis_tape:
        gen_images=geno(fake_image_noise)
        real_output=diso(images)
        fake_output=diso(gen_images)
        
        gen_loss=get_geno_loss(fake_output)
        dis_loss=get_diso_loss(real_output,fake_output)
        
        gog = gen_tape.gradient(gen_loss,geno.trainable_variables)
        god = dis_tape.gradient(dis_loss,diso.trainable_variables)
        
        geno_opt.apply_gradients(zip(gog,geno.trainable_variables))
        diso_opt.apply_gradients(zip(god,diso.trainable_variables))
        return gen_loss,dis_loss
        
        
train(timg,1000)


